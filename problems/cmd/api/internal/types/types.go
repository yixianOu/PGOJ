// Code generated by goctl. DO NOT EDIT.
package types

type AddProblemRequest struct {
	Oj           string  `form:"oj,optional"`
	Title        string  `form:"title"`
	Description  string  `form:"description"`
	Input        string  `form:"input"`
	Output       string  `form:"output"`
	SampleInput  string  `form:"input_desc"`  // 由于样例输入输出是多行文本，所以不适合用form表单提交
	SampleOutput string  `form:"output_desc"` // 由于样例输入输出是多行文本，所以不适合用form表单提交
	Hint         string  `form:"hint,optional"`
	Source       string  `form:"source,optional"`
	LimitTime    int64   `form:"limit_time"`
	LimitMemory  int64   `form:"limit_memory"`
	Auth         int64   `form:"auth,default=1"`
	Level        int64   `form:"level,options=[1,2,3,4,5]"`
	ProblemCode  string  `form:"problem_code,optional"`
	Score        int64   `form:"score"`
	TagIds       []int64 `form:"tag_ids"`
}

type AddProblemResponse struct {
}

type AddTagRequest struct {
	TagName string `form:"tag_name"`
}

type AddTagResponse struct {
}

type DeleteProblemRequest struct {
	ProblemId int64 `form:"problem_id"`
}

type DeleteProblemResponse struct {
}

type DeleteTagRequest struct {
	TagId int64 `form:"tag_id"`
}

type DeleteTagResponse struct {
}

type GetProblemByIdRequest struct {
	ProblemId int64 `path:"problem_id"`
}

type GetProblemByIdResponse struct {
	Problem struct {
		ProblemId    int64
		Author       string
		Addtime      int64
		Oj           string
		Title        string
		Description  string
		Input        string
		Output       string
		SampleInput  string
		SampleOutput string
		Hint         string
		Source       string
		LimitTime    int64
		LimitMemory  int64
		Auth         int64
		Level        int64
		Test_count   int64
		ProblemCode  string
	} `json:"problem"`
}

type GetProblemDataRequest struct {
	ProblemDataId int64 `path:"problem_data_id"`
}

type GetProblemDataResponse struct {
	ProblemData struct {
		ProblemDataId       int64
		ProblemId           int64
		Submission          int64
		Accepted            int64
		MemoryLimitExceeded int64
		TimeLimitExceeded   int64
		WrongAnswer         int64
		RuntimeError        int64
		CompileError        int64
		OutputLimitExceeded int64
		UnknowError         int64
		SegmentFault        int64
		FloatError          int64
		Score               int64
		Auth                int64
	} `json:"problem_data"`
}

type GetTagByIdRequest struct {
	TagId int64 `path:"tag_id"`
}

type GetTagByIdResponse struct {
	Tag struct {
		TagId   int64
		TagName string
	} `json:"tag"`
}

type GetTestCaseByIdRequest struct {
	TestId int64 `path:"test_id"`
}

type GetTestCaseByIdResponse struct {
	TestCase struct {
		TestId             int64
		ProblemId          int64
		TestGroup          int64
		TestInputFileName  string
		TestOutputFileName string
		UpdateAt           int64
	} `json:"test_case"`
}

type ListProblemsByTagIdRequest struct {
	TagId    int64 `path:"tag_id"`
	Page     int64 `form:"page,default=1"`
	PageSize int64 `form:"page_size,default=10"`
}

type ListProblemsByTagIdResponse struct {
	Problems []Problem `json:"problems"`
}

type ListTagsByProblemIdRequest struct {
	ProblemId int64 `path:"problem_id"`
}

type ListTagsByProblemIdResponse struct {
	Tags []Tag `json:"tags"`
}

type Problem struct {
	ProblemId    int64
	Author       string
	Addtime      int64
	Oj           string
	Title        string
	Description  string
	Input        string
	Output       string
	SampleInput  string
	SampleOutput string
	Hint         string
	Source       string
	LimitTime    int64
	LimitMemory  int64
	Auth         int64
	Level        int64
	Test_count   int64
	ProblemCode  string
}

type ProblemData struct {
	ProblemDataId       int64
	ProblemId           int64
	Submission          int64
	Accepted            int64
	MemoryLimitExceeded int64
	TimeLimitExceeded   int64
	WrongAnswer         int64
	RuntimeError        int64
	CompileError        int64
	OutputLimitExceeded int64
	UnknowError         int64
	SegmentFault        int64
	FloatError          int64
	Score               int64
	Auth                int64
}

type SearchProblemsDataRequest struct {
	Page       int64 `form:"page,default=1"`
	PageSize   int64 `form:"page_size,default=10"`
	ScoreFloor int64 `form:"score_floor,optional"`
	ScoreCeil  int64 `form:"score_ceil,optional"`
	Auth       int64 `form:"auth,optional"`
	Order      bool  `form:"order,optional"`
}

type SearchProblemsDataResponse struct {
	ProblemData []ProblemData `json:"problems_data"`
}

type SearchProblemsRequest struct {
	Page        int64  `form:"page,default=1"`
	PageSize    int64  `form:"page_size,default=10"`
	Author      string `form:"author,optional"`
	Title       string `form:"title,optional"`
	ProblemCode string `form:"problem_code,optional"`
	Oj          string `form:"oj,optional"`
	Description string `form:"description,optional"`
	Source      string `form:"source,optional"`
	Auth        int64  `form:"auth,optional"`
	Level       int64  `form:"level,options=[1,2,3,4,5],optional"`
	Order       bool   `form:"order,optional"`
}

type SearchProblemsResponse struct {
	Problems []Problem `json:"problems"`
}

type SearchTagRequest struct {
	Page    int64  `form:"page,default=1"`
	Limit   int64  `form:"page_size,default=10"`
	TagName string `form:"tag_name,optional"`
	Order   bool   `form:"order,optional"`
}

type SearchTagResponse struct {
	Tag []Tag `json:"tag"`
}

type SearchTestCaseRequest struct {
	ProblemId int64 `form:"problem_id"`
	TestGroup int64 `form:"test_group,default=0"`
}

type SearchTestCaseResponse struct {
	TestCases []TestCases `json:"test_cases"`
}

type Tag struct {
	TagId   int64
	TagName string
}

type TestCases struct {
	TestId             int64
	ProblemId          int64
	TestGroup          int64
	TestInputFileName  string
	TestOutputFileName string
	UpdateAt           int64
}

type UpdateProblemDataRequest struct {
	ProblemDataId int64 `form:"id"`
	Score         int64 `form:"score,optional"`
	Auth          int64 `form:"auth,optional"`
}

type UpdateProblemDataResponse struct {
}

type UpdateProblemRequest struct {
	ProblemId    int64   `form:"problem_id"`
	Author       string  `form:"author,optional"`
	Oj           string  `form:"oj,optional"`
	Title        string  `form:"title,optional"`
	Description  string  `form:"description,optional"`
	Input        string  `form:"input,optional"`
	Output       string  `form:"output,optional"`
	SampleInput  string  `form:"sample_input,optional"`
	SampleOutput string  `form:"sample_output,optional"`
	Hint         string  `form:"hint,optional"`
	Source       string  `form:"source,optional"`
	LimitTime    int64   `form:"limit_time,optional"`
	LimitMemory  int64   `form:"limit_memory,optional"`
	Auth         int64   `form:"auth,optional"`
	Level        int64   `form:"level,options=[1,2,3,4,5],optional"`
	ProblemCode  string  `form:"problem_code,optional"`
	TestCount    int64   `form:"test_count,optional"`
	TagIds       []int64 `form:"tag_ids,optional"`
	TagOperation bool    `form:"tag_operation,optional"`
}

type UpdateProblemResponse struct {
}

type UpdateTagRequest struct {
	TagId   int64  `form:"tag_id"`
	TagName string `form:"tag_name"`
}

type UpdateTagResponse struct {
}
