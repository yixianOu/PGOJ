// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	problemFieldNames          = builder.RawFieldNames(&Problem{})
	problemRows                = strings.Join(problemFieldNames, ",")
	problemRowsExpectAutoSet   = strings.Join(stringx.Remove(problemFieldNames, "`problem_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	problemRowsWithPlaceHolder = strings.Join(stringx.Remove(problemFieldNames, "`problem_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheOjMicroProblemProblemIdPrefix   = "cache:ojMicro:problem:problemId:"
	cacheOjMicroProblemProblemCodePrefix = "cache:ojMicro:problem:problemCode:"
	cacheOjMicroProblemTitlePrefix       = "cache:ojMicro:problem:title:"
)

type (
	problemModel interface {
		Insert(ctx context.Context, data *Problem) (sql.Result, error)
		FindOne(ctx context.Context, problemId int64) (*Problem, error)
		FindOneByProblemCode(ctx context.Context, problemCode string) (*Problem, error)
		FindOneByTitle(ctx context.Context, title string) (*Problem, error)
		Update(ctx context.Context, data *Problem) error
		Delete(ctx context.Context, problemId int64) error
	}

	defaultProblemModel struct {
		sqlc.CachedConn
		table string
	}

	Problem struct {
		ProblemId   int64     `db:"problem_id"`
		Author      string    `db:"author"`       // 题目作者
		CreateTime  time.Time `db:"create_time"`  // 题目添加时间
		Oj          string    `db:"oj"`           // 题目的OJ
		Title       string    `db:"title"`        // 题目的标题
		Des         string    `db:"des"`          // 题目的介绍
		Input       string    `db:"input"`        // 输入介绍
		Output      string    `db:"output"`       // 输出介绍
		Sinput      string    `db:"sinput"`       // 样例输入
		Soutput     string    `db:"soutput"`      // 样例输出
		Source      string    `db:"source"`       // 题目来源
		Time        int64     `db:"time"`         // 题目限时
		Memory      int64     `db:"memory"`       // 题目内存限制
		Hint        string    `db:"hint"`         // 提示
		Auth        int64     `db:"auth"`         // 题目权限
		Level       int64     `db:"level"`        // 题目难度
		ProblemCode string    `db:"problem_code"` // 题目编号
	}
)

func newProblemModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultProblemModel {
	return &defaultProblemModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`problem`",
	}
}

func (m *defaultProblemModel) Delete(ctx context.Context, problemId int64) error {
	data, err := m.FindOne(ctx, problemId)
	if err != nil {
		return err
	}

	ojMicroProblemProblemCodeKey := fmt.Sprintf("%s%v", cacheOjMicroProblemProblemCodePrefix, data.ProblemCode)
	ojMicroProblemProblemIdKey := fmt.Sprintf("%s%v", cacheOjMicroProblemProblemIdPrefix, problemId)
	ojMicroProblemTitleKey := fmt.Sprintf("%s%v", cacheOjMicroProblemTitlePrefix, data.Title)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `problem_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, problemId)
	}, ojMicroProblemProblemCodeKey, ojMicroProblemProblemIdKey, ojMicroProblemTitleKey)
	return err
}

func (m *defaultProblemModel) FindOne(ctx context.Context, problemId int64) (*Problem, error) {
	ojMicroProblemProblemIdKey := fmt.Sprintf("%s%v", cacheOjMicroProblemProblemIdPrefix, problemId)
	var resp Problem
	err := m.QueryRowCtx(ctx, &resp, ojMicroProblemProblemIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `problem_id` = ? limit 1", problemRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, problemId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProblemModel) FindOneByProblemCode(ctx context.Context, problemCode string) (*Problem, error) {
	ojMicroProblemProblemCodeKey := fmt.Sprintf("%s%v", cacheOjMicroProblemProblemCodePrefix, problemCode)
	var resp Problem
	err := m.QueryRowIndexCtx(ctx, &resp, ojMicroProblemProblemCodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `problem_code` = ? limit 1", problemRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, problemCode); err != nil {
			return nil, err
		}
		return resp.ProblemId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProblemModel) FindOneByTitle(ctx context.Context, title string) (*Problem, error) {
	ojMicroProblemTitleKey := fmt.Sprintf("%s%v", cacheOjMicroProblemTitlePrefix, title)
	var resp Problem
	err := m.QueryRowIndexCtx(ctx, &resp, ojMicroProblemTitleKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `title` = ? limit 1", problemRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, title); err != nil {
			return nil, err
		}
		return resp.ProblemId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProblemModel) Insert(ctx context.Context, data *Problem) (sql.Result, error) {
	ojMicroProblemProblemCodeKey := fmt.Sprintf("%s%v", cacheOjMicroProblemProblemCodePrefix, data.ProblemCode)
	ojMicroProblemProblemIdKey := fmt.Sprintf("%s%v", cacheOjMicroProblemProblemIdPrefix, data.ProblemId)
	ojMicroProblemTitleKey := fmt.Sprintf("%s%v", cacheOjMicroProblemTitlePrefix, data.Title)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, problemRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Author, data.Oj, data.Title, data.Des, data.Input, data.Output, data.Sinput, data.Soutput, data.Source, data.Time, data.Memory, data.Hint, data.Auth, data.Level, data.ProblemCode)
	}, ojMicroProblemProblemCodeKey, ojMicroProblemProblemIdKey, ojMicroProblemTitleKey)
	return ret, err
}

func (m *defaultProblemModel) Update(ctx context.Context, newData *Problem) error {
	data, err := m.FindOne(ctx, newData.ProblemId)
	if err != nil {
		return err
	}

	ojMicroProblemProblemCodeKey := fmt.Sprintf("%s%v", cacheOjMicroProblemProblemCodePrefix, data.ProblemCode)
	ojMicroProblemProblemIdKey := fmt.Sprintf("%s%v", cacheOjMicroProblemProblemIdPrefix, data.ProblemId)
	ojMicroProblemTitleKey := fmt.Sprintf("%s%v", cacheOjMicroProblemTitlePrefix, data.Title)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `problem_id` = ?", m.table, problemRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Author, newData.Oj, newData.Title, newData.Des, newData.Input, newData.Output, newData.Sinput, newData.Soutput, newData.Source, newData.Time, newData.Memory, newData.Hint, newData.Auth, newData.Level, newData.ProblemCode, newData.ProblemId)
	}, ojMicroProblemProblemCodeKey, ojMicroProblemProblemIdKey, ojMicroProblemTitleKey)
	return err
}

func (m *defaultProblemModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOjMicroProblemProblemIdPrefix, primary)
}

func (m *defaultProblemModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `problem_id` = ? limit 1", problemRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProblemModel) tableName() string {
	return m.table
}
