// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	testcasesFieldNames          = builder.RawFieldNames(&Testcases{})
	testcasesRows                = strings.Join(testcasesFieldNames, ",")
	testcasesRowsExpectAutoSet   = strings.Join(stringx.Remove(testcasesFieldNames, "`test_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	testcasesRowsWithPlaceHolder = strings.Join(stringx.Remove(testcasesFieldNames, "`test_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheOjMicroTestcasesTestIdPrefix             = "cache:ojMicro:testcases:testId:"
	cacheOjMicroTestcasesProblemIdTestGroupPrefix = "cache:ojMicro:testcases:problemId:testGroup:"
)

type (
	testcasesModel interface {
		Insert(ctx context.Context, data *Testcases) (sql.Result, error)
		FindOne(ctx context.Context, testId int64) (*Testcases, error)
		FindOneByProblemIdTestGroup(ctx context.Context, problemId int64, testGroup int64) (*Testcases, error)
		Update(ctx context.Context, data *Testcases) error
		Delete(ctx context.Context, testId int64) error
	}

	defaultTestcasesModel struct {
		sqlc.CachedConn
		table string
	}

	Testcases struct {
		TestId         int64     `db:"test_id"`
		ProblemId      int64     `db:"problem_id"`
		TestGroup      int64     `db:"test_group"`       // 一对io文件的组号
		InputFilePath  string    `db:"input_file_path"`  // 输入文件在minio的存放路径
		OutputFilePath string    `db:"output_file_path"` // 输出文件在minio的存放路径
		UpdateTime     time.Time `db:"update_time"`      // 更新时间
	}
)

func newTestcasesModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTestcasesModel {
	return &defaultTestcasesModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`testcases`",
	}
}

func (m *defaultTestcasesModel) Delete(ctx context.Context, testId int64) error {
	data, err := m.FindOne(ctx, testId)
	if err != nil {
		return err
	}

	ojMicroTestcasesProblemIdTestGroupKey := fmt.Sprintf("%s%v:%v", cacheOjMicroTestcasesProblemIdTestGroupPrefix, data.ProblemId, data.TestGroup)
	ojMicroTestcasesTestIdKey := fmt.Sprintf("%s%v", cacheOjMicroTestcasesTestIdPrefix, testId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `test_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, testId)
	}, ojMicroTestcasesProblemIdTestGroupKey, ojMicroTestcasesTestIdKey)
	return err
}

func (m *defaultTestcasesModel) FindOne(ctx context.Context, testId int64) (*Testcases, error) {
	ojMicroTestcasesTestIdKey := fmt.Sprintf("%s%v", cacheOjMicroTestcasesTestIdPrefix, testId)
	var resp Testcases
	err := m.QueryRowCtx(ctx, &resp, ojMicroTestcasesTestIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `test_id` = ? limit 1", testcasesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, testId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTestcasesModel) FindOneByProblemIdTestGroup(ctx context.Context, problemId int64, testGroup int64) (*Testcases, error) {
	ojMicroTestcasesProblemIdTestGroupKey := fmt.Sprintf("%s%v:%v", cacheOjMicroTestcasesProblemIdTestGroupPrefix, problemId, testGroup)
	var resp Testcases
	err := m.QueryRowIndexCtx(ctx, &resp, ojMicroTestcasesProblemIdTestGroupKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `problem_id` = ? and `test_group` = ? limit 1", testcasesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, problemId, testGroup); err != nil {
			return nil, err
		}
		return resp.TestId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTestcasesModel) Insert(ctx context.Context, data *Testcases) (sql.Result, error) {
	ojMicroTestcasesProblemIdTestGroupKey := fmt.Sprintf("%s%v:%v", cacheOjMicroTestcasesProblemIdTestGroupPrefix, data.ProblemId, data.TestGroup)
	ojMicroTestcasesTestIdKey := fmt.Sprintf("%s%v", cacheOjMicroTestcasesTestIdPrefix, data.TestId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, testcasesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ProblemId, data.TestGroup, data.InputFilePath, data.OutputFilePath)
	}, ojMicroTestcasesProblemIdTestGroupKey, ojMicroTestcasesTestIdKey)
	return ret, err
}

func (m *defaultTestcasesModel) Update(ctx context.Context, newData *Testcases) error {
	data, err := m.FindOne(ctx, newData.TestId)
	if err != nil {
		return err
	}

	ojMicroTestcasesProblemIdTestGroupKey := fmt.Sprintf("%s%v:%v", cacheOjMicroTestcasesProblemIdTestGroupPrefix, data.ProblemId, data.TestGroup)
	ojMicroTestcasesTestIdKey := fmt.Sprintf("%s%v", cacheOjMicroTestcasesTestIdPrefix, data.TestId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `test_id` = ?", m.table, testcasesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ProblemId, newData.TestGroup, newData.InputFilePath, newData.OutputFilePath, newData.TestId)
	}, ojMicroTestcasesProblemIdTestGroupKey, ojMicroTestcasesTestIdKey)
	return err
}

func (m *defaultTestcasesModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOjMicroTestcasesTestIdPrefix, primary)
}

func (m *defaultTestcasesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `test_id` = ? limit 1", testcasesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTestcasesModel) tableName() string {
	return m.table
}
