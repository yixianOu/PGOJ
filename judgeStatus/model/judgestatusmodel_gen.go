// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	judgestatusFieldNames          = builder.RawFieldNames(&Judgestatus{})
	judgestatusRows                = strings.Join(judgestatusFieldNames, ",")
	judgestatusRowsExpectAutoSet   = strings.Join(stringx.Remove(judgestatusFieldNames, "`judge_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	judgestatusRowsWithPlaceHolder = strings.Join(stringx.Remove(judgestatusFieldNames, "`judge_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheOjMicroJudgestatusJudgeIdPrefix = "cache:ojMicro:judgestatus:judgeId:"
)

type (
	judgestatusModel interface {
		Insert(ctx context.Context, data *Judgestatus) (sql.Result, error)
		FindOne(ctx context.Context, judgeId int64) (*Judgestatus, error)
		Update(ctx context.Context, data *Judgestatus) error
		Delete(ctx context.Context, judgeId int64) error
	}

	defaultJudgestatusModel struct {
		sqlc.CachedConn
		table string
	}

	Judgestatus struct {
		JudgeId        int64          `db:"judge_id"`
		UserId         int64          `db:"user_id"`
		ProblemId      int64          `db:"problem_id"`
		Oj             string         `db:"oj"`
		Result         string         `db:"result"`
		Time           int64          `db:"time"`
		Memory         int64          `db:"memory"`
		Length         int64          `db:"length"`
		Language       string         `db:"language"`
		Submittime     time.Time      `db:"submittime"`
		Judger         string         `db:"judger"`
		Contest        int64          `db:"contest"`
		Contestproblem int64          `db:"contestproblem"`
		Code           string         `db:"code"`
		Testcase       string         `db:"testcase"`
		Message        string         `db:"message"`
		Problemtitle   string         `db:"problemtitle"`
		Rating         int64          `db:"rating"`
		Ip             string         `db:"ip"`
		InputData      sql.NullString `db:"input_data"`
		SampleOutPut   sql.NullString `db:"sample_out_put"`
		UserOutPut     sql.NullString `db:"user_out_put"`
	}
)

func newJudgestatusModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultJudgestatusModel {
	return &defaultJudgestatusModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`judgestatus`",
	}
}

func (m *defaultJudgestatusModel) Delete(ctx context.Context, judgeId int64) error {
	ojMicroJudgestatusJudgeIdKey := fmt.Sprintf("%s%v", cacheOjMicroJudgestatusJudgeIdPrefix, judgeId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `judge_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, judgeId)
	}, ojMicroJudgestatusJudgeIdKey)
	return err
}

func (m *defaultJudgestatusModel) FindOne(ctx context.Context, judgeId int64) (*Judgestatus, error) {
	ojMicroJudgestatusJudgeIdKey := fmt.Sprintf("%s%v", cacheOjMicroJudgestatusJudgeIdPrefix, judgeId)
	var resp Judgestatus
	err := m.QueryRowCtx(ctx, &resp, ojMicroJudgestatusJudgeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `judge_id` = ? limit 1", judgestatusRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, judgeId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultJudgestatusModel) Insert(ctx context.Context, data *Judgestatus) (sql.Result, error) {
	ojMicroJudgestatusJudgeIdKey := fmt.Sprintf("%s%v", cacheOjMicroJudgestatusJudgeIdPrefix, data.JudgeId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, judgestatusRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.ProblemId, data.Oj, data.Result, data.Time, data.Memory, data.Length, data.Language, data.Submittime, data.Judger, data.Contest, data.Contestproblem, data.Code, data.Testcase, data.Message, data.Problemtitle, data.Rating, data.Ip, data.InputData, data.SampleOutPut, data.UserOutPut)
	}, ojMicroJudgestatusJudgeIdKey)
	return ret, err
}

func (m *defaultJudgestatusModel) Update(ctx context.Context, data *Judgestatus) error {
	ojMicroJudgestatusJudgeIdKey := fmt.Sprintf("%s%v", cacheOjMicroJudgestatusJudgeIdPrefix, data.JudgeId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `judge_id` = ?", m.table, judgestatusRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.ProblemId, data.Oj, data.Result, data.Time, data.Memory, data.Length, data.Language, data.Submittime, data.Judger, data.Contest, data.Contestproblem, data.Code, data.Testcase, data.Message, data.Problemtitle, data.Rating, data.Ip, data.InputData, data.SampleOutPut, data.UserOutPut, data.JudgeId)
	}, ojMicroJudgestatusJudgeIdKey)
	return err
}

func (m *defaultJudgestatusModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOjMicroJudgestatusJudgeIdPrefix, primary)
}

func (m *defaultJudgestatusModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `judge_id` = ? limit 1", judgestatusRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultJudgestatusModel) tableName() string {
	return m.table
}
