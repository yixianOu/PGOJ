// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	judgestatusFieldNames          = builder.RawFieldNames(&Judgestatus{})
	judgestatusRows                = strings.Join(judgestatusFieldNames, ",")
	judgestatusRowsExpectAutoSet   = strings.Join(stringx.Remove(judgestatusFieldNames, "`judge_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	judgestatusRowsWithPlaceHolder = strings.Join(stringx.Remove(judgestatusFieldNames, "`judge_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheOjMicroJudgestatusJudgeIdPrefix = "cache:ojMicro:judgestatus:judgeId:"
)

type (
	judgestatusModel interface {
		Insert(ctx context.Context, data *Judgestatus) (sql.Result, error)
		FindOne(ctx context.Context, judgeId int64) (*Judgestatus, error)
		Update(ctx context.Context, data *Judgestatus) error
		Delete(ctx context.Context, judgeId int64) error
	}

	defaultJudgestatusModel struct {
		sqlc.CachedConn
		table string
	}

	Judgestatus struct {
		JudgeId        int64          `db:"judge_id"`
		UserId         int64          `db:"user_id"`
		ProblemId      int64          `db:"problem_id"`
		Oj             string         `db:"oj"`             // 提交的OJ
		Result         string         `db:"result"`         // 提交的结果
		Time           int64          `db:"time"`           // 时间占用
		Memory         int64          `db:"memory"`         // 内存占用
		Length         int64          `db:"length"`         // 代码长度
		Language       string         `db:"language"`       // 编程语言
		CreateTime     time.Time      `db:"create_time"`    // 提交时间
		Judger         string         `db:"judger"`         // 判题的判题机
		Contest        int64          `db:"contest"`        // 该提交所属的比赛
		Contestproblem int64          `db:"contestproblem"` // 该提交所属的比赛的题目
		Code           string         `db:"code"`           // 提交的代码
		Testcase       string         `db:"testcase"`       // 在哪些样例出错
		Message        string         `db:"message"`        // 保存编译错误信息，运行时错误信息等
		Problemtitle   string         `db:"problemtitle"`   // 题目标题
		Rating         int64          `db:"rating"`         // 用户提交时的Rating
		Ip             string         `db:"ip"`             // 提交用户的ip
		InputData      sql.NullString `db:"input_data"`     // 特定的标准输入
		SampleOutPut   sql.NullString `db:"sample_out_put"` // input_data对应的标准输出
		UserOutPut     sql.NullString `db:"user_out_put"`   // input_data对应的用户代码错误输出
	}
)

func newJudgestatusModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultJudgestatusModel {
	return &defaultJudgestatusModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`judgestatus`",
	}
}

func (m *defaultJudgestatusModel) Delete(ctx context.Context, judgeId int64) error {
	ojMicroJudgestatusJudgeIdKey := fmt.Sprintf("%s%v", cacheOjMicroJudgestatusJudgeIdPrefix, judgeId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `judge_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, judgeId)
	}, ojMicroJudgestatusJudgeIdKey)
	return err
}

func (m *defaultJudgestatusModel) FindOne(ctx context.Context, judgeId int64) (*Judgestatus, error) {
	ojMicroJudgestatusJudgeIdKey := fmt.Sprintf("%s%v", cacheOjMicroJudgestatusJudgeIdPrefix, judgeId)
	var resp Judgestatus
	err := m.QueryRowCtx(ctx, &resp, ojMicroJudgestatusJudgeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `judge_id` = ? limit 1", judgestatusRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, judgeId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultJudgestatusModel) Insert(ctx context.Context, data *Judgestatus) (sql.Result, error) {
	ojMicroJudgestatusJudgeIdKey := fmt.Sprintf("%s%v", cacheOjMicroJudgestatusJudgeIdPrefix, data.JudgeId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, judgestatusRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.ProblemId, data.Oj, data.Result, data.Time, data.Memory, data.Length, data.Language, data.Judger, data.Contest, data.Contestproblem, data.Code, data.Testcase, data.Message, data.Problemtitle, data.Rating, data.Ip, data.InputData, data.SampleOutPut, data.UserOutPut)
	}, ojMicroJudgestatusJudgeIdKey)
	return ret, err
}

func (m *defaultJudgestatusModel) Update(ctx context.Context, data *Judgestatus) error {
	ojMicroJudgestatusJudgeIdKey := fmt.Sprintf("%s%v", cacheOjMicroJudgestatusJudgeIdPrefix, data.JudgeId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `judge_id` = ?", m.table, judgestatusRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.ProblemId, data.Oj, data.Result, data.Time, data.Memory, data.Length, data.Language, data.Judger, data.Contest, data.Contestproblem, data.Code, data.Testcase, data.Message, data.Problemtitle, data.Rating, data.Ip, data.InputData, data.SampleOutPut, data.UserOutPut, data.JudgeId)
	}, ojMicroJudgestatusJudgeIdKey)
	return err
}

func (m *defaultJudgestatusModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOjMicroJudgestatusJudgeIdPrefix, primary)
}

func (m *defaultJudgestatusModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `judge_id` = ? limit 1", judgestatusRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultJudgestatusModel) tableName() string {
	return m.table
}
