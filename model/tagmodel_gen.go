// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tagFieldNames          = builder.RawFieldNames(&Tag{})
	tagRows                = strings.Join(tagFieldNames, ",")
	tagRowsExpectAutoSet   = strings.Join(stringx.Remove(tagFieldNames, "`tag_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tagRowsWithPlaceHolder = strings.Join(stringx.Remove(tagFieldNames, "`tag_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheOjMicroTagTagIdPrefix   = "cache:ojMicro:tag:tagId:"
	cacheOjMicroTagTagNamePrefix = "cache:ojMicro:tag:tagName:"
)

type (
	tagModel interface {
		Insert(ctx context.Context, data *Tag) (sql.Result, error)
		FindOne(ctx context.Context, tagId int64) (*Tag, error)
		FindOneByTagName(ctx context.Context, tagName string) (*Tag, error)
		Update(ctx context.Context, data *Tag) error
		Delete(ctx context.Context, tagId int64) error
	}

	defaultTagModel struct {
		sqlc.CachedConn
		table string
	}

	Tag struct {
		TagId   int64  `db:"tag_id"`
		TagName string `db:"tag_name"`
	}
)

func newTagModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTagModel {
	return &defaultTagModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`tag`",
	}
}

func (m *defaultTagModel) Delete(ctx context.Context, tagId int64) error {
	data, err := m.FindOne(ctx, tagId)
	if err != nil {
		return err
	}

	ojMicroTagTagIdKey := fmt.Sprintf("%s%v", cacheOjMicroTagTagIdPrefix, tagId)
	ojMicroTagTagNameKey := fmt.Sprintf("%s%v", cacheOjMicroTagTagNamePrefix, data.TagName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `tag_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, tagId)
	}, ojMicroTagTagIdKey, ojMicroTagTagNameKey)
	return err
}

func (m *defaultTagModel) FindOne(ctx context.Context, tagId int64) (*Tag, error) {
	ojMicroTagTagIdKey := fmt.Sprintf("%s%v", cacheOjMicroTagTagIdPrefix, tagId)
	var resp Tag
	err := m.QueryRowCtx(ctx, &resp, ojMicroTagTagIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `tag_id` = ? limit 1", tagRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, tagId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTagModel) FindOneByTagName(ctx context.Context, tagName string) (*Tag, error) {
	ojMicroTagTagNameKey := fmt.Sprintf("%s%v", cacheOjMicroTagTagNamePrefix, tagName)
	var resp Tag
	err := m.QueryRowIndexCtx(ctx, &resp, ojMicroTagTagNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `tag_name` = ? limit 1", tagRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, tagName); err != nil {
			return nil, err
		}
		return resp.TagId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTagModel) Insert(ctx context.Context, data *Tag) (sql.Result, error) {
	ojMicroTagTagIdKey := fmt.Sprintf("%s%v", cacheOjMicroTagTagIdPrefix, data.TagId)
	ojMicroTagTagNameKey := fmt.Sprintf("%s%v", cacheOjMicroTagTagNamePrefix, data.TagName)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, tagRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TagName)
	}, ojMicroTagTagIdKey, ojMicroTagTagNameKey)
	return ret, err
}

func (m *defaultTagModel) Update(ctx context.Context, newData *Tag) error {
	data, err := m.FindOne(ctx, newData.TagId)
	if err != nil {
		return err
	}

	ojMicroTagTagIdKey := fmt.Sprintf("%s%v", cacheOjMicroTagTagIdPrefix, data.TagId)
	ojMicroTagTagNameKey := fmt.Sprintf("%s%v", cacheOjMicroTagTagNamePrefix, data.TagName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `tag_id` = ?", m.table, tagRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.TagName, newData.TagId)
	}, ojMicroTagTagIdKey, ojMicroTagTagNameKey)
	return err
}

func (m *defaultTagModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOjMicroTagTagIdPrefix, primary)
}

func (m *defaultTagModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `tag_id` = ? limit 1", tagRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTagModel) tableName() string {
	return m.table
}
