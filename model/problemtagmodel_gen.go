// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	problemTagFieldNames          = builder.RawFieldNames(&ProblemTag{})
	problemTagRows                = strings.Join(problemTagFieldNames, ",")
	problemTagRowsExpectAutoSet   = strings.Join(stringx.Remove(problemTagFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	problemTagRowsWithPlaceHolder = strings.Join(stringx.Remove(problemTagFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheOjMicroProblemTagIdPrefix             = "cache:ojMicro:problemTag:id:"
	cacheOjMicroProblemTagProblemIdTagIdPrefix = "cache:ojMicro:problemTag:problemId:tagId:"
)

type (
	problemTagModel interface {
		Insert(ctx context.Context, data *ProblemTag) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProblemTag, error)
		FindOneByProblemIdTagId(ctx context.Context, problemId int64, tagId int64) (*ProblemTag, error)
		Update(ctx context.Context, data *ProblemTag) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProblemTagModel struct {
		sqlc.CachedConn
		table string
	}

	ProblemTag struct {
		Id        int64 `db:"id"`
		ProblemId int64 `db:"problem_id"`
		TagId     int64 `db:"tag_id"`
	}
)

func newProblemTagModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultProblemTagModel {
	return &defaultProblemTagModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`problem_tag`",
	}
}

func (m *defaultProblemTagModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	ojMicroProblemTagIdKey := fmt.Sprintf("%s%v", cacheOjMicroProblemTagIdPrefix, id)
	ojMicroProblemTagProblemIdTagIdKey := fmt.Sprintf("%s%v:%v", cacheOjMicroProblemTagProblemIdTagIdPrefix, data.ProblemId, data.TagId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ojMicroProblemTagIdKey, ojMicroProblemTagProblemIdTagIdKey)
	return err
}

func (m *defaultProblemTagModel) FindOne(ctx context.Context, id int64) (*ProblemTag, error) {
	ojMicroProblemTagIdKey := fmt.Sprintf("%s%v", cacheOjMicroProblemTagIdPrefix, id)
	var resp ProblemTag
	err := m.QueryRowCtx(ctx, &resp, ojMicroProblemTagIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", problemTagRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProblemTagModel) FindOneByProblemIdTagId(ctx context.Context, problemId int64, tagId int64) (*ProblemTag, error) {
	ojMicroProblemTagProblemIdTagIdKey := fmt.Sprintf("%s%v:%v", cacheOjMicroProblemTagProblemIdTagIdPrefix, problemId, tagId)
	var resp ProblemTag
	err := m.QueryRowIndexCtx(ctx, &resp, ojMicroProblemTagProblemIdTagIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `problem_id` = ? and `tag_id` = ? limit 1", problemTagRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, problemId, tagId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProblemTagModel) Insert(ctx context.Context, data *ProblemTag) (sql.Result, error) {
	ojMicroProblemTagIdKey := fmt.Sprintf("%s%v", cacheOjMicroProblemTagIdPrefix, data.Id)
	ojMicroProblemTagProblemIdTagIdKey := fmt.Sprintf("%s%v:%v", cacheOjMicroProblemTagProblemIdTagIdPrefix, data.ProblemId, data.TagId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, problemTagRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ProblemId, data.TagId)
	}, ojMicroProblemTagIdKey, ojMicroProblemTagProblemIdTagIdKey)
	return ret, err
}

func (m *defaultProblemTagModel) Update(ctx context.Context, newData *ProblemTag) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	ojMicroProblemTagIdKey := fmt.Sprintf("%s%v", cacheOjMicroProblemTagIdPrefix, data.Id)
	ojMicroProblemTagProblemIdTagIdKey := fmt.Sprintf("%s%v:%v", cacheOjMicroProblemTagProblemIdTagIdPrefix, data.ProblemId, data.TagId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, problemTagRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ProblemId, newData.TagId, newData.Id)
	}, ojMicroProblemTagIdKey, ojMicroProblemTagProblemIdTagIdKey)
	return err
}

func (m *defaultProblemTagModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOjMicroProblemTagIdPrefix, primary)
}

func (m *defaultProblemTagModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", problemTagRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProblemTagModel) tableName() string {
	return m.table
}
