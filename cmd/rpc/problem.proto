syntax = "proto3";

option go_package ="./pb";

import "google/protobuf/timestamp.proto";

package problem;

// ------------------------------------
// Messages
// ------------------------------------

//--------------------------------problem--------------------------------
message Problem {
  int64 problemId = 1; //problemId
  string author = 2; //author
  google.protobuf.Timestamp addtime = 3; //addtime
  string oj = 4; //oj
  string title = 5; //title
  string des = 6; //des
  string input = 7; //input
  string output = 8; //output
  string sinput = 9; //sinput
  string soutput = 10; //soutput
  string source = 11; //source
  int64 time = 12; //time
  int64 memory = 13; //memory
  string hint = 14; //hint
  int64 auth = 15; //auth
  int64 level = 16; //level
//  int64 test_count = 17; //test_count
  string problem_code = 18; //problem_code
}

message AddProblemReq {
  int64 problemId = 1; //problemId
  string author = 2; //author
//  int64 addtime = 3; //addtime
  string oj = 4; //oj
  string title = 5; //title
  string des = 6; //des
  string input = 7; //input
  string output = 8; //output
  string sinput = 9; //sinput
  string soutput = 10; //soutput
  string source = 11; //source
  int64 time = 12; //time
  int64 memory = 13; //memory
  string hint = 14; //hint
  int64 auth = 15; //auth
  int64 Level = 16; //level

  int64 Score = 17; //score

  repeated int64 tagIds = 18; //tagIds

//  int64 test_count = 19; //test_count
  string problem_code = 20; //problem_code
}

message AddProblemResp {
}

message UpdateProblemReq {
  int64 problemId = 1; //problemId
  string author = 2; //author
//  google.protobuf.Timestamp addtime = 3; //addtime
  string oj = 4; //oj
  string title = 5; //title
  string des = 6; //des
  string input = 7; //input
  string output = 8; //output
  string sinput = 9; //sinput
  string soutput = 10; //soutput
  string source = 11; //source
  int64 time = 12; //time
  int64 memory = 13; //memory
  string hint = 14; //hint
  int64 auth = 15; //auth
  int64 Level = 16; //level
//  int64 test_count = 17; //test_count
  string problem_code = 18; //problem_code

  repeated int64 tagIds = 19; //tagIds
  bool tagOperation = 20; //tagOperation
}


message UpdateProblemResp {
}

message DelProblemReq {
  int64 id = 1; //id
}

message DelProblemResp {
}

message GetProblemByIdReq {
  int64 id = 1; //id
}

message GetProblemByIdResp {
  Problem problem = 1; //problem
}

message SearchProblemReq {
  int64 page = 1; //page
  int64 limit = 2; //limit
//  int64 problemId = 3; //problemId
  string author = 4; //author
//  google.protobuf.Timestamp addtime = 5; //addtime
  string oj = 6; //oj
  string title = 7; //title
  string des = 8; //des
//  string input = 9; //input
//  string output = 10; //output
//  string sinput = 11; //sinput
//  string soutput = 12; //soutput
  string source = 13; //source
//  int64 time = 14; //time
//  int64 memory = 15; //memory
//  string hint = 16; //hint
  int64 auth = 17; //auth
  int64 Level = 18; //level
  bool  order = 19; //order
  string problem_code = 20; //problem_code
}

message SearchProblemResp {
  repeated Problem problem = 1; //problem
}

message ListProblemsByTagIdReq {
  int64 page = 1; //page
  int64 limit = 2; //limit
  int64 tagId = 3; //tagId
}
message ListProblemsByTagIdResp {
  repeated Problem problems = 1; //problems
}

//--------------------------------problemTag--------------------------------
//message ProblemTag {
//  int64 id = 1; //id
//  string problem = 2; //problem
//  int64 tagId = 3; //tagId
//}
//
//message AddProblemTagReq {
//  string problem = 1; //problem
//  int64 tagId = 2; //tagId
//}
//
//message AddProblemTagResp {
//}
//
//message UpdateProblemTagReq {
//  int64 id = 1; //id
//  string problem = 2; //problem
//  int64 tagId = 3; //tagId
//}
//
//message UpdateProblemTagResp {
//}
//
//message DelProblemTagReq {
//  int64 id = 1; //id
//}
//
//message DelProblemTagResp {
//}
//
//message GetProblemTagByIdReq {
//  int64 id = 1; //id
//}
//
//message GetProblemTagByIdResp {
//  ProblemTag problemTag = 1; //problemTag
//}
//
//message SearchProblemTagReq {
//  int64 page = 1; //page
//  int64 limit = 2; //limit
//  int64 id = 3; //id
//  string problem = 4; //problem
//  int64 tagId = 5; //tagId
//}
//
//message SearchProblemTagResp {
//  repeated ProblemTag problemTag = 1; //problemTag
//}

//--------------------------------problemdata--------------------------------
message Problemdata {
  int64 problemdataId = 1; //problemdataId
  int64 problemId = 2; //problemId
  int64 submission = 4; //submission
  int64 ac = 5; //ac
  int64 mle = 6; //mle
  int64 tle = 7; //tle
  int64 rte = 8; //rte
  int64 ole = 9; //pe
  int64 ce = 10; //ce
  int64 wa = 11; //wa
  int64 ue = 12; //se
  int64 score = 13; //score
  int64 auth = 14; //auth
  int64 fe = 16; //fe
  int64 sf = 17; //sf
}

//message AddProblemdataReq {
//  string problem = 1; //problem
//  int64 level = 2; //level
//  int64 submission = 3; //submission
//  int64 ac = 4; //ac
//  int64 mle = 5; //mle
//  int64 tle = 6; //tle
//  int64 rte = 7; //rte
//  int64 pe = 8; //pe
//  int64 ce = 9; //ce
//  int64 wa = 10; //wa
//  int64 se = 11; //se
//  int64 score = 12; //score
//  int64 auth = 13; //auth
//  string oj = 14; //oj
//}
//
//message AddProblemdataResp {
//}

message UpdateProblemdataReq {
  int64 problemdataId = 1; //problemdataId
//  int64 problemId = 2; //problemId
  int64 submission = 4; //submission
  int64 ac = 5; //ac
  int64 mle = 6; //mle
  int64 tle = 7; //tle
  int64 rte = 8; //rte
  int64 ole = 9; //pe
  int64 ce = 10; //ce
  int64 wa = 11; //wa
  int64 ue = 12; //se
  int64 score = 13; //score
  int64 auth = 14; //auth
  int64 fe = 16; //fe
  int64 sf = 17; //sf
}

message UpdateProblemdataResp {
}

//message DelProblemdataReq {
//  int64 id = 1; //id
//}
//
//message DelProblemdataResp {
//}

message GetProblemdataByIdReq {
  int64 id = 1; //id
}

message GetProblemdataByIdResp {
  Problemdata problemdata = 1; //problemdata
}

message GetProblemdataByProblemIdReq {
  int64 problemId = 1; //problemId
}

message GetProblemdataByProblemIdResp {
  Problemdata problemdata = 1; //problemdata
}

message SearchProblemdataReq {
  int64 page = 1; //page
  int64 limit = 2; //limit
//  int64 problemdataId = 3; //problemdataId
//  int64 problemId = 4; //problemId
//  int64 submission = 6; //submission
//  int64 ac = 7; //ac
//  int64 mle = 8; //mle
//  int64 tle = 9; //tle
//  int64 rte = 10; //rte
//  int64 pe = 11; //pe
//  int64 ce = 12; //ce
//  int64 wa = 13; //wa
//  int64 se = 14; //se
  int64 scoreFloor = 15; //score
  int64 scoreCeil = 16; //score
  int64 auth = 17; //auth
  bool  order = 18; //order
}

message SearchProblemdataResp {
  repeated Problemdata problemdata = 1; //problemdata
}

//--------------------------------tag--------------------------------
message Tag {
  int64 tagId = 1; //tagId
  string tagName = 2; //tagName
}

message AddTagReq {
  int64 tagId = 1; //tagId
  string tagName = 2; //tagName
}

message AddTagResp {
}

message UpdateTagReq {
  int64 tagId = 1; //tagId
  string tagName = 2; //tagName
}

message UpdateTagResp {
}

message DelTagReq {
  int64 id = 1; //id
}

message DelTagResp {
}

message GetTagByIdReq {
  int64 id = 1; //id
}

message GetTagByIdResp {
  Tag tag = 1; //tag
}

message SearchTagReq {
  int64 page = 1; //page
  int64 limit = 2; //limit
//  int64 tagId = 3; //tagId
  string tagName = 4; //tagName
  bool order = 5; //order
}

message SearchTagResp {
  repeated Tag tag = 1; //tag
}

message ListTagsByProblemIdReq {
  int64 problemId = 1; //problemId
}
message ListTagsByProblemIdResp {
  repeated Tag tags = 1; //tags
}

//--------------------------------testcases--------------------------------
message Testcases {
  int64 testId = 1; //testId
  int64 problemId = 2; //problemId
  int64 testGroup = 3; //testGroup
  string inputFileName = 4; //inputFileName
  string outputFileName = 5; //outputFileName
  google.protobuf.Timestamp updateAt = 6; //updateAt
}

message AddTestcasesReq {
//  int64 testId = 1; //testId
  int64 problemId = 2; //problemId
  int64 testGroup = 3; //testGroup
  string inputFileName = 4; //inputFileName
  string outputFileName = 5; //outputFileName
}

message AddTestcasesResp {
}

message UpdateTestcasesReq {
  int64 testId = 1; //testId
//  int64 problemId = 2; //problemId
//  int64 testGroup = 3; //testGroup
  string inputFileName = 4; //inputFileName
  string outputFileName = 5; //outputFileName
}

message UpdateTestcasesResp {
}

message DelTestcasesReq {
  int64 id = 1; //id
}

message DelTestcasesResp {
}

message GetTestcasesByIdReq {
  int64 id = 1; //id
}

message GetTestcasesByIdResp {
  Testcases testcases = 1; //testcases
}

message SearchTestcasesReq {
//  int64 page = 1; //page
//  int64 limit = 2; //limit
  //  int64 testId = 3; //testId
  int64 problemId = 4; //problemId
  int64 testGroup = 5; //testGroup
//  string inputFileName = 6; //inputFileName
//  string outputFileName = 7; //outputFileName
//  bool order = 8; //order
}

message SearchTestcasesResp {
  repeated Testcases testcases = 1; //testcases
}


// ------------------------------------
// Rpc Func
// ------------------------------------

service problem_service{

  //-----------------------problem-----------------------

  rpc AddProblem(AddProblemReq) returns (AddProblemResp);
  rpc UpdateProblem(UpdateProblemReq) returns (UpdateProblemResp);
  rpc DelProblem(DelProblemReq) returns (DelProblemResp);
  rpc GetProblemById(GetProblemByIdReq) returns (GetProblemByIdResp);
  rpc SearchProblem(SearchProblemReq) returns (SearchProblemResp);
  rpc ListProblemsByTagId(ListProblemsByTagIdReq) returns (ListProblemsByTagIdResp);
  //-----------------------problemTag-----------------------
//  rpc AddProblemTag(AddProblemTagReq) returns (AddProblemTagResp);
//  rpc UpdateProblemTag(UpdateProblemTagReq) returns (UpdateProblemTagResp);
//  rpc DelProblemTag(DelProblemTagReq) returns (DelProblemTagResp);
//  rpc GetProblemTagById(GetProblemTagByIdReq) returns (GetProblemTagByIdResp);
//  rpc SearchProblemTag(SearchProblemTagReq) returns (SearchProblemTagResp);
  //-----------------------problemdata-----------------------
//  rpc AddProblemdata(AddProblemdataReq) returns (AddProblemdataResp);
  rpc UpdateProblemdata(UpdateProblemdataReq) returns (UpdateProblemdataResp);
//  rpc DelProblemdata(DelProblemdataReq) returns (DelProblemdataResp);
  rpc GetProblemdataById(GetProblemdataByIdReq) returns (GetProblemdataByIdResp);
  rpc GetProblemdataByProblemId(GetProblemdataByProblemIdReq) returns (GetProblemdataByProblemIdResp);
  rpc SearchProblemdata(SearchProblemdataReq) returns (SearchProblemdataResp);

  //-----------------------tag-----------------------

  rpc AddTag(AddTagReq) returns (AddTagResp);
  rpc UpdateTag(UpdateTagReq) returns (UpdateTagResp);
  rpc DelTag(DelTagReq) returns (DelTagResp);
  rpc GetTagById(GetTagByIdReq) returns (GetTagByIdResp);
  rpc SearchTag(SearchTagReq) returns (SearchTagResp);
  rpc ListTagsByProblemId(ListTagsByProblemIdReq) returns (ListTagsByProblemIdResp);

  //-----------------------testcases-----------------------

  rpc AddTestcases(AddTestcasesReq) returns (AddTestcasesResp);
  rpc UpdateTestcases(UpdateTestcasesReq) returns (UpdateTestcasesResp);
  rpc DelTestcases(DelTestcasesReq) returns (DelTestcasesResp);
  rpc GetTestcasesById(GetTestcasesByIdReq) returns (GetTestcasesByIdResp);
  rpc SearchTestcases(SearchTestcasesReq) returns (SearchTestcasesResp);

}
