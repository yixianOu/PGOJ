// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: judgestatus.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	JudgeService_AddJudgestatus_FullMethodName     = "/judgeStatus.judge_service/AddJudgestatus"
	JudgeService_UpdateJudgestatus_FullMethodName  = "/judgeStatus.judge_service/UpdateJudgestatus"
	JudgeService_DelJudgestatus_FullMethodName     = "/judgeStatus.judge_service/DelJudgestatus"
	JudgeService_GetJudgestatusById_FullMethodName = "/judgeStatus.judge_service/GetJudgestatusById"
	JudgeService_SearchJudgestatus_FullMethodName  = "/judgeStatus.judge_service/SearchJudgestatus"
)

// JudgeServiceClient is the client API for JudgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JudgeServiceClient interface {
	// -----------------------judgestatus-----------------------
	AddJudgestatus(ctx context.Context, in *AddJudgestatusReq, opts ...grpc.CallOption) (JudgeService_AddJudgestatusClient, error)
	UpdateJudgestatus(ctx context.Context, in *UpdateJudgestatusReq, opts ...grpc.CallOption) (*UpdateJudgestatusResp, error)
	DelJudgestatus(ctx context.Context, in *DelJudgestatusReq, opts ...grpc.CallOption) (*DelJudgestatusResp, error)
	GetJudgestatusById(ctx context.Context, in *GetJudgestatusByIdReq, opts ...grpc.CallOption) (*GetJudgestatusByIdResp, error)
	SearchJudgestatus(ctx context.Context, in *SearchJudgestatusReq, opts ...grpc.CallOption) (*SearchJudgestatusResp, error)
}

type judgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJudgeServiceClient(cc grpc.ClientConnInterface) JudgeServiceClient {
	return &judgeServiceClient{cc}
}

func (c *judgeServiceClient) AddJudgestatus(ctx context.Context, in *AddJudgestatusReq, opts ...grpc.CallOption) (JudgeService_AddJudgestatusClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JudgeService_ServiceDesc.Streams[0], JudgeService_AddJudgestatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &judgeServiceAddJudgestatusClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JudgeService_AddJudgestatusClient interface {
	Recv() (*AddJudgestatusResp, error)
	grpc.ClientStream
}

type judgeServiceAddJudgestatusClient struct {
	grpc.ClientStream
}

func (x *judgeServiceAddJudgestatusClient) Recv() (*AddJudgestatusResp, error) {
	m := new(AddJudgestatusResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *judgeServiceClient) UpdateJudgestatus(ctx context.Context, in *UpdateJudgestatusReq, opts ...grpc.CallOption) (*UpdateJudgestatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateJudgestatusResp)
	err := c.cc.Invoke(ctx, JudgeService_UpdateJudgestatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeServiceClient) DelJudgestatus(ctx context.Context, in *DelJudgestatusReq, opts ...grpc.CallOption) (*DelJudgestatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelJudgestatusResp)
	err := c.cc.Invoke(ctx, JudgeService_DelJudgestatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeServiceClient) GetJudgestatusById(ctx context.Context, in *GetJudgestatusByIdReq, opts ...grpc.CallOption) (*GetJudgestatusByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJudgestatusByIdResp)
	err := c.cc.Invoke(ctx, JudgeService_GetJudgestatusById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeServiceClient) SearchJudgestatus(ctx context.Context, in *SearchJudgestatusReq, opts ...grpc.CallOption) (*SearchJudgestatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchJudgestatusResp)
	err := c.cc.Invoke(ctx, JudgeService_SearchJudgestatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JudgeServiceServer is the server API for JudgeService service.
// All implementations must embed UnimplementedJudgeServiceServer
// for forward compatibility
type JudgeServiceServer interface {
	// -----------------------judgestatus-----------------------
	AddJudgestatus(*AddJudgestatusReq, JudgeService_AddJudgestatusServer) error
	UpdateJudgestatus(context.Context, *UpdateJudgestatusReq) (*UpdateJudgestatusResp, error)
	DelJudgestatus(context.Context, *DelJudgestatusReq) (*DelJudgestatusResp, error)
	GetJudgestatusById(context.Context, *GetJudgestatusByIdReq) (*GetJudgestatusByIdResp, error)
	SearchJudgestatus(context.Context, *SearchJudgestatusReq) (*SearchJudgestatusResp, error)
	mustEmbedUnimplementedJudgeServiceServer()
}

// UnimplementedJudgeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJudgeServiceServer struct {
}

func (UnimplementedJudgeServiceServer) AddJudgestatus(*AddJudgestatusReq, JudgeService_AddJudgestatusServer) error {
	return status.Errorf(codes.Unimplemented, "method AddJudgestatus not implemented")
}
func (UnimplementedJudgeServiceServer) UpdateJudgestatus(context.Context, *UpdateJudgestatusReq) (*UpdateJudgestatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJudgestatus not implemented")
}
func (UnimplementedJudgeServiceServer) DelJudgestatus(context.Context, *DelJudgestatusReq) (*DelJudgestatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelJudgestatus not implemented")
}
func (UnimplementedJudgeServiceServer) GetJudgestatusById(context.Context, *GetJudgestatusByIdReq) (*GetJudgestatusByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJudgestatusById not implemented")
}
func (UnimplementedJudgeServiceServer) SearchJudgestatus(context.Context, *SearchJudgestatusReq) (*SearchJudgestatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchJudgestatus not implemented")
}
func (UnimplementedJudgeServiceServer) mustEmbedUnimplementedJudgeServiceServer() {}

// UnsafeJudgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JudgeServiceServer will
// result in compilation errors.
type UnsafeJudgeServiceServer interface {
	mustEmbedUnimplementedJudgeServiceServer()
}

func RegisterJudgeServiceServer(s grpc.ServiceRegistrar, srv JudgeServiceServer) {
	s.RegisterService(&JudgeService_ServiceDesc, srv)
}

func _JudgeService_AddJudgestatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AddJudgestatusReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JudgeServiceServer).AddJudgestatus(m, &judgeServiceAddJudgestatusServer{ServerStream: stream})
}

type JudgeService_AddJudgestatusServer interface {
	Send(*AddJudgestatusResp) error
	grpc.ServerStream
}

type judgeServiceAddJudgestatusServer struct {
	grpc.ServerStream
}

func (x *judgeServiceAddJudgestatusServer) Send(m *AddJudgestatusResp) error {
	return x.ServerStream.SendMsg(m)
}

func _JudgeService_UpdateJudgestatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJudgestatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).UpdateJudgestatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JudgeService_UpdateJudgestatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).UpdateJudgestatus(ctx, req.(*UpdateJudgestatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JudgeService_DelJudgestatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelJudgestatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).DelJudgestatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JudgeService_DelJudgestatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).DelJudgestatus(ctx, req.(*DelJudgestatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JudgeService_GetJudgestatusById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJudgestatusByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).GetJudgestatusById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JudgeService_GetJudgestatusById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).GetJudgestatusById(ctx, req.(*GetJudgestatusByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JudgeService_SearchJudgestatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchJudgestatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServiceServer).SearchJudgestatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JudgeService_SearchJudgestatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServiceServer).SearchJudgestatus(ctx, req.(*SearchJudgestatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// JudgeService_ServiceDesc is the grpc.ServiceDesc for JudgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JudgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "judgeStatus.judge_service",
	HandlerType: (*JudgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateJudgestatus",
			Handler:    _JudgeService_UpdateJudgestatus_Handler,
		},
		{
			MethodName: "DelJudgestatus",
			Handler:    _JudgeService_DelJudgestatus_Handler,
		},
		{
			MethodName: "GetJudgestatusById",
			Handler:    _JudgeService_GetJudgestatusById_Handler,
		},
		{
			MethodName: "SearchJudgestatus",
			Handler:    _JudgeService_SearchJudgestatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddJudgestatus",
			Handler:       _JudgeService_AddJudgestatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "judgestatus.proto",
}
