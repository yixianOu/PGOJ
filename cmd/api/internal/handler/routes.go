// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	problem_data "oj-micro/problems/cmd/api/internal/handler/problem_data"
	problems "oj-micro/problems/cmd/api/internal/handler/problems"
	tags "oj-micro/problems/cmd/api/internal/handler/tags"
	test_case "oj-micro/problems/cmd/api/internal/handler/test_case"
	"oj-micro/problems/cmd/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				// 搜索题目数据
				Method:  http.MethodGet,
				Path:    "/problems_data",
				Handler: problem_data.SearchProblemsDataHandler(serverCtx),
			},
			{
				// 获取题目数据
				Method:  http.MethodGet,
				Path:    "/problems_data/:problem_data_id",
				Handler: problem_data.GetProblemDataHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api2"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 更新题目数据
				Method:  http.MethodPost,
				Path:    "/problems_data/update",
				Handler: problem_data.UpdateProblemDataHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api2"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 添加题目（为了保证problem和problem_data的id一致性，必须使用api添加题目，而不能直接在数据库中新增problem记录）
				Method:  http.MethodPost,
				Path:    "/problems",
				Handler: problems.AddProblemHandler(serverCtx),
			},
			{
				// 删除题目
				Method:  http.MethodPost,
				Path:    "/problems/delete",
				Handler: problems.DeleteProblemHandler(serverCtx),
			},
			{
				// 更新题目
				Method:  http.MethodPost,
				Path:    "/problems/update",
				Handler: problems.UpdateProblemHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api2"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 搜索题目
				Method:  http.MethodGet,
				Path:    "/problems",
				Handler: problems.SearchProblemsHandler(serverCtx),
			},
			{
				// 获取题目信息
				Method:  http.MethodGet,
				Path:    "/problems/:problem_id",
				Handler: problems.GetProblemByIdHandler(serverCtx),
			},
			{
				// 根据标签获取题目
				Method:  http.MethodGet,
				Path:    "/problems/tag/:tag_id",
				Handler: problems.ListProblemsByTagIdHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api2"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 添加标签
				Method:  http.MethodPost,
				Path:    "/tags",
				Handler: tags.AddTagHandler(serverCtx),
			},
			{
				// 删除标签
				Method:  http.MethodPost,
				Path:    "/tags/delete",
				Handler: tags.DeleteTagHandler(serverCtx),
			},
			{
				// 更新标签
				Method:  http.MethodPost,
				Path:    "/tags/update",
				Handler: tags.UpdateTagHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api2"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 搜索标签
				Method:  http.MethodGet,
				Path:    "/tags",
				Handler: tags.SearchTagsHandler(serverCtx),
			},
			{
				// 获取标签信息
				Method:  http.MethodGet,
				Path:    "/tags/:tag_id",
				Handler: tags.GetTagByIdHandler(serverCtx),
			},
			{
				// 根据题目获取标签
				Method:  http.MethodGet,
				Path:    "/tags/problem/:problem_id",
				Handler: tags.ListTagsByProblemIdHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api2"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 搜索测试用例
				Method:  http.MethodGet,
				Path:    "/test_cases",
				Handler: test_case.SearchTestCasesHandler(serverCtx),
			},
			{
				// 获取测试用例信息
				Method:  http.MethodGet,
				Path:    "/test_cases/:test_id",
				Handler: test_case.GetTestCaseByIdHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api2"),
	)
}
