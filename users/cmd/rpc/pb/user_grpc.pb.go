// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserService_AddUserLogin_FullMethodName       = "/user.user_service/AddUserLogin"
	UserService_UpdateUserLogin_FullMethodName    = "/user.user_service/UpdateUserLogin"
	UserService_DelUserLogin_FullMethodName       = "/user.user_service/DelUserLogin"
	UserService_GetUserLoginById_FullMethodName   = "/user.user_service/GetUserLoginById"
	UserService_SearchUserLogin_FullMethodName    = "/user.user_service/SearchUserLogin"
	UserService_LoginUser_FullMethodName          = "/user.user_service/LoginUser"
	UserService_LoginWithCode_FullMethodName      = "/user.user_service/LoginWithCode"
	UserService_PartialUpdateUser_FullMethodName  = "/user.user_service/PartialUpdateUser"
	UserService_UpdateUserProfile_FullMethodName  = "/user.user_service/UpdateUserProfile"
	UserService_GetUserProfileById_FullMethodName = "/user.user_service/GetUserProfileById"
	UserService_SearchUserProfile_FullMethodName  = "/user.user_service/SearchUserProfile"
	UserService_GetRankByUserId_FullMethodName    = "/user.user_service/GetRankByUserId"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// -----------------------用户认证授权-----------------------
	AddUserLogin(ctx context.Context, in *AddUserLoginReq, opts ...grpc.CallOption) (*AddUserLoginResp, error)
	UpdateUserLogin(ctx context.Context, in *UpdateUserLoginReq, opts ...grpc.CallOption) (*UpdateUserLoginResp, error)
	DelUserLogin(ctx context.Context, in *DelUserLoginReq, opts ...grpc.CallOption) (*DelUserLoginResp, error)
	GetUserLoginById(ctx context.Context, in *GetUserLoginByIdReq, opts ...grpc.CallOption) (*GetUserLoginByIdResp, error)
	SearchUserLogin(ctx context.Context, in *SearchUserLoginReq, opts ...grpc.CallOption) (*SearchUserLoginResp, error)
	LoginUser(ctx context.Context, in *LoginUserReq, opts ...grpc.CallOption) (*LoginUserResp, error)
	LoginWithCode(ctx context.Context, in *LoginWithCodeReq, opts ...grpc.CallOption) (*LoginUserResp, error)
	PartialUpdateUser(ctx context.Context, in *PartialUpdateUserReq, opts ...grpc.CallOption) (*PartialUpdateUserResp, error)
	// -----------------------用户信息-----------------------
	//
	//	rpc AddUserProfile(AddUserProfileReq) returns (AddUserProfileResp);
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*UpdateUserProfileResp, error)
	// rpc DelUserProfile(DelUserProfileReq) returns (DelUserProfileResp);
	GetUserProfileById(ctx context.Context, in *GetUserProfileByIdReq, opts ...grpc.CallOption) (*GetUserProfileByIdResp, error)
	SearchUserProfile(ctx context.Context, in *SearchUserProfileReq, opts ...grpc.CallOption) (*SearchUserProfileResp, error)
	GetRankByUserId(ctx context.Context, in *GetRankByUserIdReq, opts ...grpc.CallOption) (*GetRankByUserIdResp, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) AddUserLogin(ctx context.Context, in *AddUserLoginReq, opts ...grpc.CallOption) (*AddUserLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserLoginResp)
	err := c.cc.Invoke(ctx, UserService_AddUserLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserLogin(ctx context.Context, in *UpdateUserLoginReq, opts ...grpc.CallOption) (*UpdateUserLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserLoginResp)
	err := c.cc.Invoke(ctx, UserService_UpdateUserLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DelUserLogin(ctx context.Context, in *DelUserLoginReq, opts ...grpc.CallOption) (*DelUserLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelUserLoginResp)
	err := c.cc.Invoke(ctx, UserService_DelUserLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserLoginById(ctx context.Context, in *GetUserLoginByIdReq, opts ...grpc.CallOption) (*GetUserLoginByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserLoginByIdResp)
	err := c.cc.Invoke(ctx, UserService_GetUserLoginById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SearchUserLogin(ctx context.Context, in *SearchUserLoginReq, opts ...grpc.CallOption) (*SearchUserLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchUserLoginResp)
	err := c.cc.Invoke(ctx, UserService_SearchUserLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LoginUser(ctx context.Context, in *LoginUserReq, opts ...grpc.CallOption) (*LoginUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginUserResp)
	err := c.cc.Invoke(ctx, UserService_LoginUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LoginWithCode(ctx context.Context, in *LoginWithCodeReq, opts ...grpc.CallOption) (*LoginUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginUserResp)
	err := c.cc.Invoke(ctx, UserService_LoginWithCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) PartialUpdateUser(ctx context.Context, in *PartialUpdateUserReq, opts ...grpc.CallOption) (*PartialUpdateUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartialUpdateUserResp)
	err := c.cc.Invoke(ctx, UserService_PartialUpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...grpc.CallOption) (*UpdateUserProfileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserProfileResp)
	err := c.cc.Invoke(ctx, UserService_UpdateUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserProfileById(ctx context.Context, in *GetUserProfileByIdReq, opts ...grpc.CallOption) (*GetUserProfileByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserProfileByIdResp)
	err := c.cc.Invoke(ctx, UserService_GetUserProfileById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SearchUserProfile(ctx context.Context, in *SearchUserProfileReq, opts ...grpc.CallOption) (*SearchUserProfileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchUserProfileResp)
	err := c.cc.Invoke(ctx, UserService_SearchUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetRankByUserId(ctx context.Context, in *GetRankByUserIdReq, opts ...grpc.CallOption) (*GetRankByUserIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRankByUserIdResp)
	err := c.cc.Invoke(ctx, UserService_GetRankByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// -----------------------用户认证授权-----------------------
	AddUserLogin(context.Context, *AddUserLoginReq) (*AddUserLoginResp, error)
	UpdateUserLogin(context.Context, *UpdateUserLoginReq) (*UpdateUserLoginResp, error)
	DelUserLogin(context.Context, *DelUserLoginReq) (*DelUserLoginResp, error)
	GetUserLoginById(context.Context, *GetUserLoginByIdReq) (*GetUserLoginByIdResp, error)
	SearchUserLogin(context.Context, *SearchUserLoginReq) (*SearchUserLoginResp, error)
	LoginUser(context.Context, *LoginUserReq) (*LoginUserResp, error)
	LoginWithCode(context.Context, *LoginWithCodeReq) (*LoginUserResp, error)
	PartialUpdateUser(context.Context, *PartialUpdateUserReq) (*PartialUpdateUserResp, error)
	// -----------------------用户信息-----------------------
	//
	//	rpc AddUserProfile(AddUserProfileReq) returns (AddUserProfileResp);
	UpdateUserProfile(context.Context, *UpdateUserProfileReq) (*UpdateUserProfileResp, error)
	// rpc DelUserProfile(DelUserProfileReq) returns (DelUserProfileResp);
	GetUserProfileById(context.Context, *GetUserProfileByIdReq) (*GetUserProfileByIdResp, error)
	SearchUserProfile(context.Context, *SearchUserProfileReq) (*SearchUserProfileResp, error)
	GetRankByUserId(context.Context, *GetRankByUserIdReq) (*GetRankByUserIdResp, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) AddUserLogin(context.Context, *AddUserLoginReq) (*AddUserLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserLogin not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserLogin(context.Context, *UpdateUserLoginReq) (*UpdateUserLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserLogin not implemented")
}
func (UnimplementedUserServiceServer) DelUserLogin(context.Context, *DelUserLoginReq) (*DelUserLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserLogin not implemented")
}
func (UnimplementedUserServiceServer) GetUserLoginById(context.Context, *GetUserLoginByIdReq) (*GetUserLoginByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLoginById not implemented")
}
func (UnimplementedUserServiceServer) SearchUserLogin(context.Context, *SearchUserLoginReq) (*SearchUserLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserLogin not implemented")
}
func (UnimplementedUserServiceServer) LoginUser(context.Context, *LoginUserReq) (*LoginUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedUserServiceServer) LoginWithCode(context.Context, *LoginWithCodeReq) (*LoginUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithCode not implemented")
}
func (UnimplementedUserServiceServer) PartialUpdateUser(context.Context, *PartialUpdateUserReq) (*PartialUpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdateUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserProfile(context.Context, *UpdateUserProfileReq) (*UpdateUserProfileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedUserServiceServer) GetUserProfileById(context.Context, *GetUserProfileByIdReq) (*GetUserProfileByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfileById not implemented")
}
func (UnimplementedUserServiceServer) SearchUserProfile(context.Context, *SearchUserProfileReq) (*SearchUserProfileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserProfile not implemented")
}
func (UnimplementedUserServiceServer) GetRankByUserId(context.Context, *GetRankByUserIdReq) (*GetRankByUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankByUserId not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_AddUserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddUserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUserLogin(ctx, req.(*AddUserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserLogin(ctx, req.(*UpdateUserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DelUserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DelUserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DelUserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DelUserLogin(ctx, req.(*DelUserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserLoginById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLoginByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserLoginById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserLoginById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserLoginById(ctx, req.(*GetUserLoginByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SearchUserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SearchUserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SearchUserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SearchUserLogin(ctx, req.(*SearchUserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LoginUser(ctx, req.(*LoginUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LoginWithCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LoginWithCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_LoginWithCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LoginWithCode(ctx, req.(*LoginWithCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_PartialUpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartialUpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).PartialUpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_PartialUpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).PartialUpdateUser(ctx, req.(*PartialUpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserProfileById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserProfileById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserProfileById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserProfileById(ctx, req.(*GetUserProfileByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SearchUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SearchUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SearchUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SearchUserProfile(ctx, req.(*SearchUserProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetRankByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetRankByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetRankByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetRankByUserId(ctx, req.(*GetRankByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.user_service",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUserLogin",
			Handler:    _UserService_AddUserLogin_Handler,
		},
		{
			MethodName: "UpdateUserLogin",
			Handler:    _UserService_UpdateUserLogin_Handler,
		},
		{
			MethodName: "DelUserLogin",
			Handler:    _UserService_DelUserLogin_Handler,
		},
		{
			MethodName: "GetUserLoginById",
			Handler:    _UserService_GetUserLoginById_Handler,
		},
		{
			MethodName: "SearchUserLogin",
			Handler:    _UserService_SearchUserLogin_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _UserService_LoginUser_Handler,
		},
		{
			MethodName: "LoginWithCode",
			Handler:    _UserService_LoginWithCode_Handler,
		},
		{
			MethodName: "PartialUpdateUser",
			Handler:    _UserService_PartialUpdateUser_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _UserService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "GetUserProfileById",
			Handler:    _UserService_GetUserProfileById_Handler,
		},
		{
			MethodName: "SearchUserProfile",
			Handler:    _UserService_SearchUserProfile_Handler,
		},
		{
			MethodName: "GetRankByUserId",
			Handler:    _UserService_GetRankByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
