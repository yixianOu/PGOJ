// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userLoginFieldNames          = builder.RawFieldNames(&UserLogin{})
	userLoginRows                = strings.Join(userLoginFieldNames, ",")
	userLoginRowsExpectAutoSet   = strings.Join(stringx.Remove(userLoginFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userLoginRowsWithPlaceHolder = strings.Join(stringx.Remove(userLoginFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheOjMicroUserLoginIdPrefix       = "cache:ojMicro:userLogin:id:"
	cacheOjMicroUserLoginEmailPrefix    = "cache:ojMicro:userLogin:email:"
	cacheOjMicroUserLoginUsernamePrefix = "cache:ojMicro:userLogin:username:"
)

type (
	userLoginModel interface {
		Insert(ctx context.Context, data *UserLogin) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserLogin, error)
		FindOneByEmail(ctx context.Context, email string) (*UserLogin, error)
		FindOneByUsername(ctx context.Context, username string) (*UserLogin, error)
		Update(ctx context.Context, data *UserLogin) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserLoginModel struct {
		sqlc.CachedConn
		table string
	}

	UserLogin struct {
		Id            int64  `db:"id"`
		Password      string `db:"password"`
		RoleLevel     int64  `db:"is_superuser"`
		Username      string `db:"username"`
		Email         string `db:"email"`
		CoverImageUrl string `db:"cover_image_url"`
	}
)

func newUserLoginModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserLoginModel {
	return &defaultUserLoginModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_login`",
	}
}

func (m *defaultUserLoginModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	ojMicroUserLoginEmailKey := fmt.Sprintf("%s%v", cacheOjMicroUserLoginEmailPrefix, data.Email)
	ojMicroUserLoginIdKey := fmt.Sprintf("%s%v", cacheOjMicroUserLoginIdPrefix, id)
	ojMicroUserLoginUsernameKey := fmt.Sprintf("%s%v", cacheOjMicroUserLoginUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ojMicroUserLoginEmailKey, ojMicroUserLoginIdKey, ojMicroUserLoginUsernameKey)
	return err
}

func (m *defaultUserLoginModel) FindOne(ctx context.Context, id int64) (*UserLogin, error) {
	ojMicroUserLoginIdKey := fmt.Sprintf("%s%v", cacheOjMicroUserLoginIdPrefix, id)
	var resp UserLogin
	err := m.QueryRowCtx(ctx, &resp, ojMicroUserLoginIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userLoginRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserLoginModel) FindOneByEmail(ctx context.Context, email string) (*UserLogin, error) {
	ojMicroUserLoginEmailKey := fmt.Sprintf("%s%v", cacheOjMicroUserLoginEmailPrefix, email)
	var resp UserLogin
	err := m.QueryRowIndexCtx(ctx, &resp, ojMicroUserLoginEmailKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", userLoginRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, email); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserLoginModel) FindOneByUsername(ctx context.Context, username string) (*UserLogin, error) {
	ojMicroUserLoginUsernameKey := fmt.Sprintf("%s%v", cacheOjMicroUserLoginUsernamePrefix, username)
	var resp UserLogin
	err := m.QueryRowIndexCtx(ctx, &resp, ojMicroUserLoginUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", userLoginRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserLoginModel) Insert(ctx context.Context, data *UserLogin) (sql.Result, error) {
	ojMicroUserLoginEmailKey := fmt.Sprintf("%s%v", cacheOjMicroUserLoginEmailPrefix, data.Email)
	ojMicroUserLoginIdKey := fmt.Sprintf("%s%v", cacheOjMicroUserLoginIdPrefix, data.Id)
	ojMicroUserLoginUsernameKey := fmt.Sprintf("%s%v", cacheOjMicroUserLoginUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, userLoginRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Password, data.RoleLevel, data.Username, data.Email, data.CoverImageUrl)
	}, ojMicroUserLoginEmailKey, ojMicroUserLoginIdKey, ojMicroUserLoginUsernameKey)
	return ret, err
}

func (m *defaultUserLoginModel) Update(ctx context.Context, newData *UserLogin) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	ojMicroUserLoginEmailKey := fmt.Sprintf("%s%v", cacheOjMicroUserLoginEmailPrefix, data.Email)
	ojMicroUserLoginIdKey := fmt.Sprintf("%s%v", cacheOjMicroUserLoginIdPrefix, data.Id)
	ojMicroUserLoginUsernameKey := fmt.Sprintf("%s%v", cacheOjMicroUserLoginUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userLoginRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Password, newData.RoleLevel, newData.Username, newData.Email, newData.CoverImageUrl, newData.Id)
	}, ojMicroUserLoginEmailKey, ojMicroUserLoginIdKey, ojMicroUserLoginUsernameKey)
	return err
}

func (m *defaultUserLoginModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOjMicroUserLoginIdPrefix, primary)
}

func (m *defaultUserLoginModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userLoginRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserLoginModel) tableName() string {
	return m.table
}
