// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userProfileFieldNames          = builder.RawFieldNames(&UserProfile{})
	userProfileRows                = strings.Join(userProfileFieldNames, ",")
	userProfileRowsExpectAutoSet   = strings.Join(stringx.Remove(userProfileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userProfileRowsWithPlaceHolder = strings.Join(stringx.Remove(userProfileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheOjMicroUserProfileIdPrefix     = "cache:ojMicro:userProfile:id:"
	cacheOjMicroUserProfileUserIdPrefix = "cache:ojMicro:userProfile:userId:"
)

type (
	userProfileModel interface {
		Insert(ctx context.Context, data *UserProfile) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserProfile, error)
		FindOneByUserId(ctx context.Context, userId int64) (*UserProfile, error)
		Update(ctx context.Context, data *UserProfile) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserProfileModel struct {
		sqlc.CachedConn
		table string
	}

	UserProfile struct {
		Id          int64          `db:"id"`
		UserId      int64          `db:"user_id"`
		Phone       sql.NullString `db:"phone"`        // 电话号码
		Name        sql.NullString `db:"name"`         // 真实姓名
		ACCount     int64          `db:"AC_count"`     // 用户AC的题目总数
		SubmitCount int64          `db:"submit_count"` // 用户提交的题目总数
		Score       int64          `db:"score"`        // 用户的得分
		Description sql.NullString `db:"description"`  // 自我描述
		Rating      uint64         `db:"rating"`       // 用户的排名
		School      sql.NullString `db:"school"`       // 用户学校
	}
)

func newUserProfileModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserProfileModel {
	return &defaultUserProfileModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_profile`",
	}
}

func (m *defaultUserProfileModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	ojMicroUserProfileIdKey := fmt.Sprintf("%s%v", cacheOjMicroUserProfileIdPrefix, id)
	ojMicroUserProfileUserIdKey := fmt.Sprintf("%s%v", cacheOjMicroUserProfileUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ojMicroUserProfileIdKey, ojMicroUserProfileUserIdKey)
	return err
}

func (m *defaultUserProfileModel) FindOne(ctx context.Context, id int64) (*UserProfile, error) {
	ojMicroUserProfileIdKey := fmt.Sprintf("%s%v", cacheOjMicroUserProfileIdPrefix, id)
	var resp UserProfile
	err := m.QueryRowCtx(ctx, &resp, ojMicroUserProfileIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userProfileRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserProfileModel) FindOneByUserId(ctx context.Context, userId int64) (*UserProfile, error) {
	ojMicroUserProfileUserIdKey := fmt.Sprintf("%s%v", cacheOjMicroUserProfileUserIdPrefix, userId)
	var resp UserProfile
	err := m.QueryRowIndexCtx(ctx, &resp, ojMicroUserProfileUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", userProfileRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserProfileModel) Insert(ctx context.Context, data *UserProfile) (sql.Result, error) {
	ojMicroUserProfileIdKey := fmt.Sprintf("%s%v", cacheOjMicroUserProfileIdPrefix, data.Id)
	ojMicroUserProfileUserIdKey := fmt.Sprintf("%s%v", cacheOjMicroUserProfileUserIdPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userProfileRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Phone, data.Name, data.ACCount, data.SubmitCount, data.Score, data.Description, data.Rating, data.School)
	}, ojMicroUserProfileIdKey, ojMicroUserProfileUserIdKey)
	return ret, err
}

func (m *defaultUserProfileModel) Update(ctx context.Context, newData *UserProfile) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	ojMicroUserProfileIdKey := fmt.Sprintf("%s%v", cacheOjMicroUserProfileIdPrefix, data.Id)
	ojMicroUserProfileUserIdKey := fmt.Sprintf("%s%v", cacheOjMicroUserProfileUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userProfileRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.Phone, newData.Name, newData.ACCount, newData.SubmitCount, newData.Score, newData.Description, newData.Rating, newData.School, newData.Id)
	}, ojMicroUserProfileIdKey, ojMicroUserProfileUserIdKey)
	return err
}

func (m *defaultUserProfileModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOjMicroUserProfileIdPrefix, primary)
}

func (m *defaultUserProfileModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userProfileRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserProfileModel) tableName() string {
	return m.table
}
